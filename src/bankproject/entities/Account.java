package bankproject.entities;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Random;
import java.util.Set;

public class Account extends AbstractEntity {
	
	private Integer idAccount = null; 
	private Customer customer = null;
	private String accountNumber = null; 
	private int balance = 0;
	private List<Operation> operationsList = new ArrayList<Operation>(); 
	private static Set<Account> allAccounts = new HashSet<Account>(); 
	private Random randGen = null;
	
	/**
	 * Common initializations for constructors 
	 */
	private void preInit() {
		this.randGen = new Random();	
	}
	
	private void postInit() {
		Account.allAccounts.add(this);
	}
	
	/**
	 * Default constructor
	 */
	public Account () {
		this.preInit();
		//this.postInit();
	}

	/**
	 * Constructor to create an account with the accountNumber generated by the random method (createAccountNumberFromRandomNumber)
	 */

	public Account(CountryEnum country, Customer customer){
		this.preInit();
		this.accountNumber = country.getAbbreviation() + this.createRandomCode();
		this.customer = customer;
		this.postInit();
	}
	
	/**
	 * Constructor to create an account with the accountNumber done by a string (createAccountNumberFromString) ---> to be used in the operation Thread
	 */
	
	public Account(String str) {
		this.preInit();
		this.accountNumber = str;
		this.postInit();

	}
	
	/**
	 * getter
	 * @return idAccount
	 */
	public Integer getIdAccount() {
		return idAccount;
	}

	/**
	 * setter
	 * @param idAccount
	 */
	public void setIdAccount(int idAccount) {
		this.idAccount = idAccount;
	}
	
	/**
	 * getter
	 * @return accountNumber
	 */
	public String getAccountNumber() {
		return accountNumber;
	}

	/**
	 * setter
	 * @param accountNumber
	 */
	public void setAccountNumber(String accountNumber) {
		this.accountNumber = accountNumber;
	}

	/**
	 * getter
	 * @return balance
	 */
	public int getBalance() {
		return balance;
	}

	/**
	 * setter
	 * @param balance
	 */
	public void setBalance(int balance) {
		this.balance = balance;
	}
	
	/**
	 * getter
	 * @return operationsList
	 */
	public List<Operation> getOperationsList() {
		return operationsList;
	}
	
	/**
	 * setter
	 * @param operationsList
	 */
	public void setOperationsList(List<Operation> operationsList) {
		this.operationsList.addAll(operationsList);
	}
	
	/**
	 * 
	 * @param operation
	 */
	public void addOperationToOperationsList (Operation operation) {
		this.operationsList.add(operation);
	}
	
	/**
	 * Creates random six digits numeric code
	 * @return
	 */
	private String createRandomCode() {
		return  String.format("%06d", this.randGen.nextInt(1000000));

	}
	
	/**
	 * 
	 * @param money
	 */
	public void addMoneyToBalance (int money){
		this.balance += money;
	}
	
	/**
	 * 
	 * @param money
	 */
	public void removeMoneyToBalance(int money){
		this.balance -= money;
	}
	
	public boolean equals(Object other) {
		if (other == null) return false;
	    if (other == this) return true;
	    if (!(other instanceof Account))return false;
	    Account otherAccount = (Account)other;
	    
	    return this.accountNumber == otherAccount.getAccountNumber();
	}
	
	public int hashCode() {
		return this.accountNumber.hashCode();
		
	}

	public static void main(String[] args) {
		
//		Account account = new Account(CountryEnum.SPAIN);
//		// accountNumber = account.getAccountNumber();
//		System.out.println(account.getAccountNumber());
		
	}

	public Customer getCustomer() {
		return customer;
	}

	public void setCustomer(Customer customer) {
		this.customer = customer;
	}


	
}
